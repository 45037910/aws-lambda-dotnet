@page "/monitor-dlq"

@using Amazon.Lambda.TestTool.Runtime
@using Amazon.Lambda.TestTool.WebTester31.Models

@inject LocalLambdaOptions LambdaOptions
@inject IModalService Modal

<h2>Monitor Dead Letter Queue</h2>
<p>
    An Amazon SQS queue can be designated as the <a href="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html">dead letter queue</a> for a Lambda function. When
    Lambda functions fail to handle an asynchronous request, like an Amazon S3 or Amazon DynamoDB Stream event, the failed request is sent to the queue.
</p>
<p>
    When monitoring is enabled the @Constants.PRODUCT_NAME will read the request from the queue and begin executing it within your debugging environment.
</p>

<FunctionPickerComponent @ref="FunctionPicker" />

<div class="col-sm form-group" for="aws-dlq-queues">
    <label class="col-xs-3 control-label">Amazon SQS Queue:</label>
    <select id="aws-dlq-queues" class="form-control" @bind="SelectedQueueUrl">
        @foreach (var queue in AvailableQueues)
        {
            <option value="@queue.QueueUrl">@queue.QueueName</option>
        }
        
    </select>
    <i id="spinnerDlqQueues" class="fa fa-spinner" style="font-size: 24px; margin: 5px; visibility: hidden;"></i>
</div>

<div class="row mt-3">
    <div class="col-sm-9">
        <div class="form-group" id="start-monitor-div">
            <button class="btn btn-primary btn-sm" @onclick="OnStartMonitoring">Start Monitoring</button>
        </div>
        <div class="form-group collapse" id="stop-monitor-div">
            <i class="fa fa-spinner fa-spin" style="font-size: 24px; margin: 5px;"></i>
            <button class="btn btn-secondary btn-sm" @onclick="OnStopMonitoring">
                Stop Monitoring
            </button>
        </div>
        <div class="alert alert-warning collapse" style="margin-left: 10px" role="alert" id="monitor-error-msg-div">
        </div>
    </div>
    <div class="form-group float-right col-sm-3" id="purge-dlq-div">
        <button class="btn btn-danger float-right btn-sm" @onclick="OnPurgeDlqClick">Purge Queue</button>
    </div>
</div>


<div>
    <table class="table" id="dlg-log-table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Time</th>
                <th scope="col">Logs</th>
                <th scope="col">Error</th>
                <th scope="col">Event</th>
            </tr>
        </thead>
        <tbody id="dlg-log-table-body">

        </tbody>
    </table>
</div>

@code {

    FunctionPickerComponent _functionPicker;


    DlqMonitor _dlqMonitor;

    FunctionPickerComponent FunctionPicker
    {
        get => _functionPicker;
        set
        {
            _functionPicker = value;
            FunctionPicker.OnChangeAsync = this.OnFunctionPickerChange;

            _ = OnFunctionPickerChange();
        }
    }

    IList<QueueItem> AvailableQueues { get; set; } = new List<QueueItem>();
    
    public string SelectedQueueUrl { get; set; }



    void OnStartMonitoring()
    {
        var function = this.LambdaOptions.LoadLambdaFuntion(FunctionPicker.ConfigFile, FunctionPicker.FunctionHandler);
        _dlqMonitor = new DlqMonitor(this.LambdaOptions.LambdaRuntime, function, FunctionPicker.AWSProfile, FunctionPicker.AWSRegion, SelectedQueueUrl);
        _dlqMonitor.Start();
    }
    
    void OnStopMonitoring()
    {
        _dlqMonitor?.Stop();
        _dlqMonitor = null;
    }
    
    async Task OnPurgeDlqClick()
    {
        await this.LambdaOptions.LambdaRuntime.AWSService.PurgeQueueAsync(FunctionPicker.AWSProfile, FunctionPicker.AWSRegion, SelectedQueueUrl);
    }    

    string _lastFetchQueueSettings;
    async Task OnFunctionPickerChange()
    {
        if (string.IsNullOrEmpty(FunctionPicker.AWSProfile) || string.IsNullOrEmpty(FunctionPicker.AWSRegion))
        {
            _lastFetchQueueSettings = "";
            AvailableQueues.Clear();
            this.StateHasChanged();
            return;
        }

        var fetchQueueSettings = $"profile={FunctionPicker.AWSProfile},region={FunctionPicker.AWSRegion}";
        if (!string.Equals(_lastFetchQueueSettings, fetchQueueSettings))
        {
            var queueUrls = await this.LambdaOptions.LambdaRuntime.AWSService.ListQueuesAsync(FunctionPicker.AWSProfile, FunctionPicker.AWSRegion);
        
            AvailableQueues.Clear();
            foreach (var queueUrl in queueUrls)
            {
                AvailableQueues.Add(new QueueItem{QueueUrl = queueUrl});
            }

            if (AvailableQueues.Count > 0)
            {
                SelectedQueueUrl = AvailableQueues[0].QueueUrl;
            }
            
            _lastFetchQueueSettings = fetchQueueSettings;
            this.StateHasChanged();
        }
    }
}